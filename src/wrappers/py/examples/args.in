import sys; sys.path.insert(1, '@pythondir@')
import logging; logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
import os, time

reporting = @reporting_enabled@

if reporting:
    import base64
    from wsgiref.simple_server import WSGIServer, WSGIRequestHandler
    try:
        import simplejsonrpc as jsonrpc
    except:
        print >> sys.stderr, 'You need to install simple-jsonrpc to run this script.'
        sys.exit(1)
    server = jsonrpc.Server("http://%s:8000/rpc" % "@reporting_server@")

try:
    import argparse
except:
    print >> sys.stderr, 'You need to install argparse to run this script.'
    sys.exit(-1)

try:
    from scapy.all import IP, TCP, UDP, PcapWriter, fragment
except:
    print >> sys.stderr, 'You need to install scapy to run this script.'
    sys.exit(-1)

try:
    import tracebox
except:
    print >> sys.stderr, 'You need to install tracebox to run this script.'
    sys.exit(-1)

if not os.geteuid() == 0:
        print >> sys.stderr, 'This script must be run as root.'
        sys.exit(-1)

args = {}

def parse_args():
    global args
    parser = argparse.ArgumentParser()
    parser.add_argument("destination", type=str)
    if reporting:
        parser.add_argument("-n", "--noreport", action='store_true', default=False)
    parser.add_argument("-d", "--dport", type=int, default=80)
    parser.add_argument("-O", "--output", type=str)
    args = parser.parse_args()
    return args.destination, args.dport


class __Pkt(object):
    def __init__(self, pkt):
        self.pkt = pkt
        self.time = time.time()

    def __str__(self):
        return self.pkt

pkts = []
def dump_fct(pkt):
    pkts.append(__Pkt(pkt))

def do_tracebox(probe, **kwargs):
    pcap = None
    if args.output:
        pcap = PcapWriter(args.output, linktype = 101, sync = True, append = True)
    for ttl, r in tracebox.itertrace("%s" % probe, dump = dump_fct, **kwargs):
        yield (ttl, r)
    if reporting and not args.noreport:
        try:
            exp = os.path.basename(sys.argv[0]).split('.')[0]
            server.report(exp, [(base64.b64encode(pkt.pkt), pkt.time) for pkt in pkts])
        except:
            print "Unable to report result"
    if pcap:
        pcap.write(pkts)
        pcap.close()

def get_tracebox(probe, **kwargs):
    ret = {}
    for ttl, r in do_tracebox(probe, **kwargs):
        ret[ttl] = r
    return ret
